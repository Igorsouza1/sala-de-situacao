---
description: Orquestrador global de agentes e regras do projeto
globs: "**/*"
alwaysApply: true
priority: 0
---

# agents.mdc — Orquestrador Global

## Contexto do Projeto
Stack: Next.js (App Router) + Drizzle (Postgres) + Zod + Azure (Para Imagens) + Banco PostgreSQL com Postgis no Supabase.  
Padrões centrais: ROTAS finas, validação obrigatória, respostas consistentes, domínio no service, queries no repository.

## Objetivos do Orquestrador
- **Roteamento de regras**: decidir qual `.mdc` aplicar (handler/service/repository/validations).
- **Contratos globais**: resposta, erros, logs, segurança mínima.
- **Coerência**: resolver conflitos entre regras e impor checklists.

## Prioridade de Regras (mais forte → mais fraca)
1. **Validations** (`004-validations.mdc`)  
2. **Handler** (`001-handler.mdc`)  
3. **Service** (`002-service.mdc`)  
4. **Repository** (`003-repository.mdc`)  
5. **Index/Convenções** (`000-index.mdc`)

> Se houver conflito: **Validations > Handler > Service > Repository**.

## Roteamento por Caminho/Globs
- `app/api/**/route.ts` → aplicar **Handler** + **Validations**.  
- `lib/service/**/*.ts` → aplicar **Service** + **Validations** (tipos).  
- `lib/repositories/**/*.ts` → aplicar **Repository**.  
- `lib/validations/**/*.ts` → aplicar **Validations**.

## Contratos Globais
- **Resposta**:  lib/api/responses.ts
- **Erros HTTP**: 400 input, 401/403 auth, 404 não encontrado, 409 conflito, 422 semântica, 500 interno.
- **Logs**: sem PII; incluir rota e contexto mínimo.
- **Idempotência**: GET sem efeitos colaterais; POST cria; PUT/PATCH atualiza; DELETE remove.

## Segurança Mínima (fail-closed)
- Rejeitar `Content-Type` inválido.  
- Limite de tamanho de body (ex.: 2–5MB).  
- Nunca ecoar inputs sensíveis em erros/logs.

## Performance & Cache (guidelines)
- GET com ETag/`If-None-Match` quando viável.  
- Paginação padrão `page/pageSize` (máx. 100).  
- Tempo de resposta alvo (p95): ≤ 300ms (in-memory) / ≤ 800ms (DB pesado).

## Decisor (árvore rápida)
1. **Arquivo é rota?** `app/api/**/route.ts` → Handler + Validations.  
2. **Arquivo é service?** `lib/service/**` → Service (+ types das Validations).  
3. **Arquivo é repository?** `lib/repositories/**` → Repository.  
4. **Arquivo é schema?** `lib/validations/**` → Validations.  
5. **Outro** → seguir convenções `000-index.mdc`.

## Macros de Qualidade (aplique sempre)
- **Handler fino**: valida → chama service → responde.  
- **Service puro**: domínio/orquestração, sem HTTP.  
- **Repository**: apenas SQL/queries.  
- **Validation**: `z.coerce` p/ entrada, `z.infer` p/ tipos.

## Anti-padrões Globais (reprovar)
- Lógica de negócio no handler.  
- Resposta fora do contrato `{ ok: ... }`.  
- `try/catch` ausente em rotas.  
- Repository chamando service (inversão errada).  
- Mensagens de erro genéricas sem status correto.

## Checklist Global (gate de PR)
- [ ] Rota usa **Validations** + `apiSuccess/apiError`.  
- [ ] Service sem `Request/Response`.  
- [ ] Repository sem regra de negócio.  
- [ ] Erros mapeados e logs limpos.  
- [ ] Paginação/limites aplicados quando lista.  
- [ ] Tests manuais (feliz/triste) descritos na PR.

## Glossário Rápido
- **Rota/Handler**: entrada/saída HTTP.  
- **Service**: regras de negócio/orquestração.  
- **Repository**: persistência.  
- **Validation**: schemas Zod + tipos inferidos.

