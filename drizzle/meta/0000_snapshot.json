{
  "id": "00000000-0000-0000-0000-000000000000",
  "prevId": "",
  "version": "7",
  "dialect": "postgresql",
  "tables": {
    "public.spatial_ref_sys": {
      "name": "spatial_ref_sys",
      "schema": "",
      "columns": {
        "srid": {
          "name": "srid",
          "type": "integer",
          "primaryKey": true,
          "notNull": true
        },
        "auth_name": {
          "name": "auth_name",
          "type": "varchar(256)",
          "primaryKey": false,
          "notNull": false
        },
        "auth_srid": {
          "name": "auth_srid",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "srtext": {
          "name": "srtext",
          "type": "varchar(2048)",
          "primaryKey": false,
          "notNull": false
        },
        "proj4text": {
          "name": "proj4text",
          "type": "varchar(2048)",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {
        "spatial_ref_sys_srid_check": {
          "name": "spatial_ref_sys_srid_check",
          "value": "(srid > 0) AND (srid <= 998999)"
        }
      },
      "policies": {},
      "isRLSEnabled": false
    },
    "public.us_gaz": {
      "name": "us_gaz",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "seq": {
          "name": "seq",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "word": {
          "name": "word",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "stdword": {
          "name": "stdword",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "token": {
          "name": "token",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "is_custom": {
          "name": "is_custom",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {},
      "policies": {},
      "isRLSEnabled": false
    },
    "public.us_rules": {
      "name": "us_rules",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "rule": {
          "name": "rule",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "is_custom": {
          "name": "is_custom",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {},
      "policies": {},
      "isRLSEnabled": false
    },
    "public.pointcloud_formats": {
      "name": "pointcloud_formats",
      "schema": "",
      "columns": {
        "pcid": {
          "name": "pcid",
          "type": "integer",
          "primaryKey": true,
          "notNull": true
        },
        "srid": {
          "name": "srid",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "schema": {
          "name": "schema",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {
        "pointcloud_formats_pcid_check": {
          "name": "pointcloud_formats_pcid_check",
          "value": "(pcid > 0) AND (pcid < 65536)"
        },
        "pointcloud_formats_schema_check": {
          "name": "pointcloud_formats_schema_check",
          "value": "CHECK (pc_schemaisvalid(schema"
        }
      },
      "policies": {},
      "isRLSEnabled": false
    },
    "public.us_lex": {
      "name": "us_lex",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "seq": {
          "name": "seq",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "word": {
          "name": "word",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "stdword": {
          "name": "stdword",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "token": {
          "name": "token",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "is_custom": {
          "name": "is_custom",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {},
      "policies": {},
      "isRLSEnabled": false
    }
  },
  "enums": {},
  "schemas": {},
  "sequences": {},
  "roles": {},
  "policies": {},
  "views": {
    "public.geography_columns": {
      "name": "geography_columns",
      "schema": "public",
      "columns": {
        "f_table_catalog": {
          "name": "f_table_catalog",
          "type": "name",
          "primaryKey": false,
          "notNull": false
        },
        "f_table_schema": {
          "name": "f_table_schema",
          "type": "name",
          "primaryKey": false,
          "notNull": false
        },
        "f_table_name": {
          "name": "f_table_name",
          "type": "name",
          "primaryKey": false,
          "notNull": false
        },
        "f_geography_column": {
          "name": "f_geography_column",
          "type": "name",
          "primaryKey": false,
          "notNull": false
        },
        "coord_dimension": {
          "name": "coord_dimension",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "srid": {
          "name": "srid",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "type": {
          "name": "type",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        }
      },
      "isExisting": false,
      "definition": "SELECT current_database() AS f_table_catalog, n.nspname AS f_table_schema, c.relname AS f_table_name, a.attname AS f_geography_column, postgis_typmod_dims(a.atttypmod) AS coord_dimension, postgis_typmod_srid(a.atttypmod) AS srid, postgis_typmod_type(a.atttypmod) AS type FROM pg_class c, pg_attribute a, pg_type t, pg_namespace n WHERE t.typname = 'geography'::name AND a.attisdropped = false AND a.atttypid = t.oid AND a.attrelid = c.oid AND c.relnamespace = n.oid AND (c.relkind = ANY (ARRAY['r'::\"char\", 'v'::\"char\", 'm'::\"char\", 'f'::\"char\", 'p'::\"char\"])) AND NOT pg_is_other_temp_schema(c.relnamespace) AND has_table_privilege(c.oid, 'SELECT'::text)",
      "materialized": false
    },
    "public.geometry_columns": {
      "name": "geometry_columns",
      "schema": "public",
      "columns": {
        "f_table_catalog": {
          "name": "f_table_catalog",
          "type": "varchar(256)",
          "primaryKey": false,
          "notNull": false
        },
        "f_table_schema": {
          "name": "f_table_schema",
          "type": "name",
          "primaryKey": false,
          "notNull": false
        },
        "f_table_name": {
          "name": "f_table_name",
          "type": "name",
          "primaryKey": false,
          "notNull": false
        },
        "f_geometry_column": {
          "name": "f_geometry_column",
          "type": "name",
          "primaryKey": false,
          "notNull": false
        },
        "coord_dimension": {
          "name": "coord_dimension",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "srid": {
          "name": "srid",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "type": {
          "name": "type",
          "type": "varchar(30)",
          "primaryKey": false,
          "notNull": false
        }
      },
      "isExisting": false,
      "definition": "SELECT current_database()::character varying(256) AS f_table_catalog, n.nspname AS f_table_schema, c.relname AS f_table_name, a.attname AS f_geometry_column, COALESCE(postgis_typmod_dims(a.atttypmod), sn.ndims, 2) AS coord_dimension, COALESCE(NULLIF(postgis_typmod_srid(a.atttypmod), 0), sr.srid, 0) AS srid, replace(replace(COALESCE(NULLIF(upper(postgis_typmod_type(a.atttypmod)), 'GEOMETRY'::text), st.type, 'GEOMETRY'::text), 'ZM'::text, ''::text), 'Z'::text, ''::text)::character varying(30) AS type FROM pg_class c JOIN pg_attribute a ON a.attrelid = c.oid AND NOT a.attisdropped JOIN pg_namespace n ON c.relnamespace = n.oid JOIN pg_type t ON a.atttypid = t.oid LEFT JOIN ( SELECT s.connamespace, s.conrelid, s.conkey, replace(split_part(s.consrc, ''''::text, 2), ')'::text, ''::text) AS type FROM ( SELECT pg_constraint.connamespace, pg_constraint.conrelid, pg_constraint.conkey, pg_get_constraintdef(pg_constraint.oid) AS consrc FROM pg_constraint) s WHERE s.consrc ~~* '%geometrytype(% = %'::text) st ON st.connamespace = n.oid AND st.conrelid = c.oid AND (a.attnum = ANY (st.conkey)) LEFT JOIN ( SELECT s.connamespace, s.conrelid, s.conkey, replace(split_part(s.consrc, ' = '::text, 2), ')'::text, ''::text)::integer AS ndims FROM ( SELECT pg_constraint.connamespace, pg_constraint.conrelid, pg_constraint.conkey, pg_get_constraintdef(pg_constraint.oid) AS consrc FROM pg_constraint) s WHERE s.consrc ~~* '%ndims(% = %'::text) sn ON sn.connamespace = n.oid AND sn.conrelid = c.oid AND (a.attnum = ANY (sn.conkey)) LEFT JOIN ( SELECT s.connamespace, s.conrelid, s.conkey, replace(replace(split_part(s.consrc, ' = '::text, 2), ')'::text, ''::text), '('::text, ''::text)::integer AS srid FROM ( SELECT pg_constraint.connamespace, pg_constraint.conrelid, pg_constraint.conkey, pg_get_constraintdef(pg_constraint.oid) AS consrc FROM pg_constraint) s WHERE s.consrc ~~* '%srid(% = %'::text) sr ON sr.connamespace = n.oid AND sr.conrelid = c.oid AND (a.attnum = ANY (sr.conkey)) WHERE (c.relkind = ANY (ARRAY['r'::\"char\", 'v'::\"char\", 'm'::\"char\", 'f'::\"char\", 'p'::\"char\"])) AND NOT c.relname = 'raster_columns'::name AND t.typname = 'geometry'::name AND NOT pg_is_other_temp_schema(c.relnamespace) AND has_table_privilege(c.oid, 'SELECT'::text)",
      "materialized": false
    },
    "public.raster_columns": {
      "name": "raster_columns",
      "schema": "public",
      "columns": {
        "r_table_catalog": {
          "name": "r_table_catalog",
          "type": "name",
          "primaryKey": false,
          "notNull": false
        },
        "r_table_schema": {
          "name": "r_table_schema",
          "type": "name",
          "primaryKey": false,
          "notNull": false
        },
        "r_table_name": {
          "name": "r_table_name",
          "type": "name",
          "primaryKey": false,
          "notNull": false
        },
        "r_raster_column": {
          "name": "r_raster_column",
          "type": "name",
          "primaryKey": false,
          "notNull": false
        },
        "srid": {
          "name": "srid",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "scale_x": {
          "name": "scale_x",
          "type": "double precision",
          "primaryKey": false,
          "notNull": false
        },
        "scale_y": {
          "name": "scale_y",
          "type": "double precision",
          "primaryKey": false,
          "notNull": false
        },
        "blocksize_x": {
          "name": "blocksize_x",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "blocksize_y": {
          "name": "blocksize_y",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "same_alignment": {
          "name": "same_alignment",
          "type": "boolean",
          "primaryKey": false,
          "notNull": false
        },
        "regular_blocking": {
          "name": "regular_blocking",
          "type": "boolean",
          "primaryKey": false,
          "notNull": false
        },
        "num_bands": {
          "name": "num_bands",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "pixel_types": {
          "name": "pixel_types",
          "type": "text[]",
          "primaryKey": false,
          "notNull": false
        },
        "nodata_values": {
          "name": "nodata_values",
          "type": "double precision[]",
          "primaryKey": false,
          "notNull": false
        },
        "out_db": {
          "name": "out_db",
          "type": "boolean[]",
          "primaryKey": false,
          "notNull": false
        },
        "extent": {
          "name": "extent",
          "type": "geometry",
          "primaryKey": false,
          "notNull": false
        },
        "spatial_index": {
          "name": "spatial_index",
          "type": "boolean",
          "primaryKey": false,
          "notNull": false
        }
      },
      "isExisting": false,
      "definition": "SELECT current_database() AS r_table_catalog, n.nspname AS r_table_schema, c.relname AS r_table_name, a.attname AS r_raster_column, COALESCE(_raster_constraint_info_srid(n.nspname, c.relname, a.attname), ( SELECT st_srid('010100000000000000000000000000000000000000'::geometry) AS st_srid)) AS srid, _raster_constraint_info_scale(n.nspname, c.relname, a.attname, 'x'::bpchar) AS scale_x, _raster_constraint_info_scale(n.nspname, c.relname, a.attname, 'y'::bpchar) AS scale_y, _raster_constraint_info_blocksize(n.nspname, c.relname, a.attname, 'width'::text) AS blocksize_x, _raster_constraint_info_blocksize(n.nspname, c.relname, a.attname, 'height'::text) AS blocksize_y, COALESCE(_raster_constraint_info_alignment(n.nspname, c.relname, a.attname), false) AS same_alignment, COALESCE(_raster_constraint_info_regular_blocking(n.nspname, c.relname, a.attname), false) AS regular_blocking, _raster_constraint_info_num_bands(n.nspname, c.relname, a.attname) AS num_bands, _raster_constraint_info_pixel_types(n.nspname, c.relname, a.attname) AS pixel_types, _raster_constraint_info_nodata_values(n.nspname, c.relname, a.attname) AS nodata_values, _raster_constraint_info_out_db(n.nspname, c.relname, a.attname) AS out_db, _raster_constraint_info_extent(n.nspname, c.relname, a.attname) AS extent, COALESCE(_raster_constraint_info_index(n.nspname, c.relname, a.attname), false) AS spatial_index FROM pg_class c, pg_attribute a, pg_type t, pg_namespace n WHERE t.typname = 'raster'::name AND a.attisdropped = false AND a.atttypid = t.oid AND a.attrelid = c.oid AND c.relnamespace = n.oid AND (c.relkind = ANY (ARRAY['r'::\"char\", 'v'::\"char\", 'm'::\"char\", 'f'::\"char\", 'p'::\"char\"])) AND NOT pg_is_other_temp_schema(c.relnamespace) AND has_table_privilege(c.oid, 'SELECT'::text)",
      "materialized": false
    },
    "public.raster_overviews": {
      "name": "raster_overviews",
      "schema": "public",
      "columns": {
        "o_table_catalog": {
          "name": "o_table_catalog",
          "type": "name",
          "primaryKey": false,
          "notNull": false
        },
        "o_table_schema": {
          "name": "o_table_schema",
          "type": "name",
          "primaryKey": false,
          "notNull": false
        },
        "o_table_name": {
          "name": "o_table_name",
          "type": "name",
          "primaryKey": false,
          "notNull": false
        },
        "o_raster_column": {
          "name": "o_raster_column",
          "type": "name",
          "primaryKey": false,
          "notNull": false
        },
        "r_table_catalog": {
          "name": "r_table_catalog",
          "type": "name",
          "primaryKey": false,
          "notNull": false
        },
        "r_table_schema": {
          "name": "r_table_schema",
          "type": "name",
          "primaryKey": false,
          "notNull": false
        },
        "r_table_name": {
          "name": "r_table_name",
          "type": "name",
          "primaryKey": false,
          "notNull": false
        },
        "r_raster_column": {
          "name": "r_raster_column",
          "type": "name",
          "primaryKey": false,
          "notNull": false
        },
        "overview_factor": {
          "name": "overview_factor",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        }
      },
      "isExisting": false,
      "definition": "SELECT current_database() AS o_table_catalog, n.nspname AS o_table_schema, c.relname AS o_table_name, a.attname AS o_raster_column, current_database() AS r_table_catalog, split_part(split_part(s.consrc, '''::name'::text, 1), ''''::text, 2)::name AS r_table_schema, split_part(split_part(s.consrc, '''::name'::text, 2), ''''::text, 2)::name AS r_table_name, split_part(split_part(s.consrc, '''::name'::text, 3), ''''::text, 2)::name AS r_raster_column, btrim(split_part(s.consrc, ','::text, 2))::integer AS overview_factor FROM pg_class c, pg_attribute a, pg_type t, pg_namespace n, ( SELECT pg_constraint.connamespace, pg_constraint.conrelid, pg_constraint.conkey, pg_get_constraintdef(pg_constraint.oid) AS consrc FROM pg_constraint) s WHERE t.typname = 'raster'::name AND a.attisdropped = false AND a.atttypid = t.oid AND a.attrelid = c.oid AND c.relnamespace = n.oid AND (c.relkind::text = ANY (ARRAY['r'::character(1), 'v'::character(1), 'm'::character(1), 'f'::character(1)]::text[])) AND s.connamespace = n.oid AND s.conrelid = c.oid AND s.consrc ~~ '%_overview_constraint(%'::text AND NOT pg_is_other_temp_schema(c.relnamespace) AND has_table_privilege(c.oid, 'SELECT'::text)",
      "materialized": false
    },
    "public.pointcloud_columns": {
      "name": "pointcloud_columns",
      "schema": "public",
      "columns": {
        "schema": {
          "name": "schema",
          "type": "name",
          "primaryKey": false,
          "notNull": false
        },
        "table": {
          "name": "table",
          "type": "name",
          "primaryKey": false,
          "notNull": false
        },
        "column": {
          "name": "column",
          "type": "name",
          "primaryKey": false,
          "notNull": false
        },
        "pcid": {
          "name": "pcid",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "srid": {
          "name": "srid",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "type": {
          "name": "type",
          "type": "name",
          "primaryKey": false,
          "notNull": false
        }
      },
      "isExisting": false,
      "definition": "SELECT n.nspname AS schema, c.relname AS \"table\", a.attname AS \"column\", pc_typmod_pcid(a.atttypmod) AS pcid, p.srid, t.typname AS type FROM pg_class c, pg_type t, pg_namespace n, pg_attribute a LEFT JOIN pointcloud_formats p ON pc_typmod_pcid(a.atttypmod) = p.pcid WHERE (t.typname = ANY (ARRAY['pcpatch'::name, 'pcpoint'::name])) AND a.attisdropped = false AND a.atttypid = t.oid AND a.attrelid = c.oid AND c.relnamespace = n.oid AND NOT pg_is_other_temp_schema(c.relnamespace) AND has_table_privilege(c.oid, 'SELECT'::text)",
      "materialized": false
    }
  },
  "_meta": {
    "schemas": {},
    "tables": {},
    "columns": {}
  },
  "internal": {
    "tables": {
      "raster_columns": {
        "columns": {
          "pixel_types": {
            "isArray": true,
            "dimensions": 0,
            "rawType": "text"
          },
          "nodata_values": {
            "isArray": true,
            "dimensions": 0,
            "rawType": "double precision"
          },
          "out_db": {
            "isArray": true,
            "dimensions": 0,
            "rawType": "boolean"
          }
        }
      }
    }
  }
}