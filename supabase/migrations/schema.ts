import { pgSchema, serial, geometry, bigint, doublePrecision, integer, varchar, numeric, text, timestamp, date, foreignKey, unique, time, uuid } from "drizzle-orm/pg-core"


export const rioDaPrata = pgSchema("rio_da_prata");

export const baciaRioDaPrataIdSeqInRioDaPrata = rioDaPrata.sequence("Bacia_RioDaPrata_id_seq", {  startWith: "1", increment: "1", minValue: "1", maxValue: "2147483647", cache: "1", cycle: false })
export const rioDaPrataLeitoIdSeqInRioDaPrata = rioDaPrata.sequence("Rio da Prata - Leito_id_seq", {  startWith: "1", increment: "1", minValue: "1", maxValue: "2147483647", cache: "1", cycle: false })



export const baciaRioDaPrataInRioDaPrata = rioDaPrata.table("Bacia_Rio_Da_Prata", {
	id: serial().primaryKey().notNull(),
	geom: geometry({ type: "multipolygon", srid: 4326 }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	hybasId: bigint("hybas_id", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	nextDown: bigint("next_down", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	nextSink: bigint("next_sink", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	mainBas: bigint("main_bas", { mode: "number" }),
	distSink: doublePrecision("dist_sink"),
	distMain: doublePrecision("dist_main"),
	subArea: doublePrecision("sub_area"),
	upArea: doublePrecision("up_area"),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	pfafId: bigint("pfaf_id", { mode: "number" }),
	endo: integer(),
	coast: integer(),
	order: integer("order_"),
	sort: integer(),
	disM3Pyr: doublePrecision("dis_m3_pyr"),
	disM3Pmn: doublePrecision("dis_m3_pmn"),
	disM3Pmx: doublePrecision("dis_m3_pmx"),
	runMmSyr: integer("run_mm_syr"),
	inuPcSmn: integer("inu_pc_smn"),
	inuPcUmn: integer("inu_pc_umn"),
	inuPcSmx: integer("inu_pc_smx"),
	inuPcUmx: integer("inu_pc_umx"),
	inuPcSlt: integer("inu_pc_slt"),
	inuPcUlt: integer("inu_pc_ult"),
	lkaPcSse: integer("lka_pc_sse"),
	lkaPcUse: integer("lka_pc_use"),
	lkvMcUsu: integer("lkv_mc_usu"),
	revMcUsu: integer("rev_mc_usu"),
	dorPcPva: integer("dor_pc_pva"),
	riaHaSsu: doublePrecision("ria_ha_ssu"),
	riaHaUsu: doublePrecision("ria_ha_usu"),
	rivTcSsu: doublePrecision("riv_tc_ssu"),
	rivTcUsu: doublePrecision("riv_tc_usu"),
	gwtCmSav: integer("gwt_cm_sav"),
	eleMtSav: integer("ele_mt_sav"),
	eleMtUav: integer("ele_mt_uav"),
	eleMtSmn: integer("ele_mt_smn"),
	eleMtSmx: integer("ele_mt_smx"),
	slpDgSav: integer("slp_dg_sav"),
	slpDgUav: integer("slp_dg_uav"),
	sgrDkSav: integer("sgr_dk_sav"),
	clzClSmj: integer("clz_cl_smj"),
	clsClSmj: integer("cls_cl_smj"),
	tmpDcSyr: integer("tmp_dc_syr"),
	tmpDcUyr: integer("tmp_dc_uyr"),
	tmpDcSmn: integer("tmp_dc_smn"),
	tmpDcSmx: integer("tmp_dc_smx"),
	tmpDcS01: integer("tmp_dc_s01"),
	tmpDcS02: integer("tmp_dc_s02"),
	tmpDcS03: integer("tmp_dc_s03"),
	tmpDcS04: integer("tmp_dc_s04"),
	tmpDcS05: integer("tmp_dc_s05"),
	tmpDcS06: integer("tmp_dc_s06"),
	tmpDcS07: integer("tmp_dc_s07"),
	tmpDcS08: integer("tmp_dc_s08"),
	tmpDcS09: integer("tmp_dc_s09"),
	tmpDcS10: integer("tmp_dc_s10"),
	tmpDcS11: integer("tmp_dc_s11"),
	tmpDcS12: integer("tmp_dc_s12"),
	preMmSyr: integer("pre_mm_syr"),
	preMmUyr: integer("pre_mm_uyr"),
	preMmS01: integer("pre_mm_s01"),
	preMmS02: integer("pre_mm_s02"),
	preMmS03: integer("pre_mm_s03"),
	preMmS04: integer("pre_mm_s04"),
	preMmS05: integer("pre_mm_s05"),
	preMmS06: integer("pre_mm_s06"),
	preMmS07: integer("pre_mm_s07"),
	preMmS08: integer("pre_mm_s08"),
	preMmS09: integer("pre_mm_s09"),
	preMmS10: integer("pre_mm_s10"),
	preMmS11: integer("pre_mm_s11"),
	preMmS12: integer("pre_mm_s12"),
	petMmSyr: integer("pet_mm_syr"),
	petMmUyr: integer("pet_mm_uyr"),
	petMmS01: integer("pet_mm_s01"),
	petMmS02: integer("pet_mm_s02"),
	petMmS03: integer("pet_mm_s03"),
	petMmS04: integer("pet_mm_s04"),
	petMmS05: integer("pet_mm_s05"),
	petMmS06: integer("pet_mm_s06"),
	petMmS07: integer("pet_mm_s07"),
	petMmS08: integer("pet_mm_s08"),
	petMmS09: integer("pet_mm_s09"),
	petMmS10: integer("pet_mm_s10"),
	petMmS11: integer("pet_mm_s11"),
	petMmS12: integer("pet_mm_s12"),
	aetMmSyr: integer("aet_mm_syr"),
	aetMmUyr: integer("aet_mm_uyr"),
	aetMmS01: integer("aet_mm_s01"),
	aetMmS02: integer("aet_mm_s02"),
	aetMmS03: integer("aet_mm_s03"),
	aetMmS04: integer("aet_mm_s04"),
	aetMmS05: integer("aet_mm_s05"),
	aetMmS06: integer("aet_mm_s06"),
	aetMmS07: integer("aet_mm_s07"),
	aetMmS08: integer("aet_mm_s08"),
	aetMmS09: integer("aet_mm_s09"),
	aetMmS10: integer("aet_mm_s10"),
	aetMmS11: integer("aet_mm_s11"),
	aetMmS12: integer("aet_mm_s12"),
	ariIxSav: integer("ari_ix_sav"),
	ariIxUav: integer("ari_ix_uav"),
	cmiIxSyr: integer("cmi_ix_syr"),
	cmiIxUyr: integer("cmi_ix_uyr"),
	cmiIxS01: integer("cmi_ix_s01"),
	cmiIxS02: integer("cmi_ix_s02"),
	cmiIxS03: integer("cmi_ix_s03"),
	cmiIxS04: integer("cmi_ix_s04"),
	cmiIxS05: integer("cmi_ix_s05"),
	cmiIxS06: integer("cmi_ix_s06"),
	cmiIxS07: integer("cmi_ix_s07"),
	cmiIxS08: integer("cmi_ix_s08"),
	cmiIxS09: integer("cmi_ix_s09"),
	cmiIxS10: integer("cmi_ix_s10"),
	cmiIxS11: integer("cmi_ix_s11"),
	cmiIxS12: integer("cmi_ix_s12"),
	snwPcSyr: integer("snw_pc_syr"),
	snwPcUyr: integer("snw_pc_uyr"),
	snwPcSmx: integer("snw_pc_smx"),
	snwPcS01: integer("snw_pc_s01"),
	snwPcS02: integer("snw_pc_s02"),
	snwPcS03: integer("snw_pc_s03"),
	snwPcS04: integer("snw_pc_s04"),
	snwPcS05: integer("snw_pc_s05"),
	snwPcS06: integer("snw_pc_s06"),
	snwPcS07: integer("snw_pc_s07"),
	snwPcS08: integer("snw_pc_s08"),
	snwPcS09: integer("snw_pc_s09"),
	snwPcS10: integer("snw_pc_s10"),
	snwPcS11: integer("snw_pc_s11"),
	snwPcS12: integer("snw_pc_s12"),
	glcClSmj: integer("glc_cl_smj"),
	glcPcS01: integer("glc_pc_s01"),
	glcPcS02: integer("glc_pc_s02"),
	glcPcS03: integer("glc_pc_s03"),
	glcPcS04: integer("glc_pc_s04"),
	glcPcS05: integer("glc_pc_s05"),
	glcPcS06: integer("glc_pc_s06"),
	glcPcS07: integer("glc_pc_s07"),
	glcPcS08: integer("glc_pc_s08"),
	glcPcS09: integer("glc_pc_s09"),
	glcPcS10: integer("glc_pc_s10"),
	glcPcS11: integer("glc_pc_s11"),
	glcPcS12: integer("glc_pc_s12"),
	glcPcS13: integer("glc_pc_s13"),
	glcPcS14: integer("glc_pc_s14"),
	glcPcS15: integer("glc_pc_s15"),
	glcPcS16: integer("glc_pc_s16"),
	glcPcS17: integer("glc_pc_s17"),
	glcPcS18: integer("glc_pc_s18"),
	glcPcS19: integer("glc_pc_s19"),
	glcPcS20: integer("glc_pc_s20"),
	glcPcS21: integer("glc_pc_s21"),
	glcPcS22: integer("glc_pc_s22"),
	glcPcU01: integer("glc_pc_u01"),
	glcPcU02: integer("glc_pc_u02"),
	glcPcU03: integer("glc_pc_u03"),
	glcPcU04: integer("glc_pc_u04"),
	glcPcU05: integer("glc_pc_u05"),
	glcPcU06: integer("glc_pc_u06"),
	glcPcU07: integer("glc_pc_u07"),
	glcPcU08: integer("glc_pc_u08"),
	glcPcU09: integer("glc_pc_u09"),
	glcPcU10: integer("glc_pc_u10"),
	glcPcU11: integer("glc_pc_u11"),
	glcPcU12: integer("glc_pc_u12"),
	glcPcU13: integer("glc_pc_u13"),
	glcPcU14: integer("glc_pc_u14"),
	glcPcU15: integer("glc_pc_u15"),
	glcPcU16: integer("glc_pc_u16"),
	glcPcU17: integer("glc_pc_u17"),
	glcPcU18: integer("glc_pc_u18"),
	glcPcU19: integer("glc_pc_u19"),
	glcPcU20: integer("glc_pc_u20"),
	glcPcU21: integer("glc_pc_u21"),
	glcPcU22: integer("glc_pc_u22"),
	pnvClSmj: integer("pnv_cl_smj"),
	pnvPcS01: integer("pnv_pc_s01"),
	pnvPcS02: integer("pnv_pc_s02"),
	pnvPcS03: integer("pnv_pc_s03"),
	pnvPcS04: integer("pnv_pc_s04"),
	pnvPcS05: integer("pnv_pc_s05"),
	pnvPcS06: integer("pnv_pc_s06"),
	pnvPcS07: integer("pnv_pc_s07"),
	pnvPcS08: integer("pnv_pc_s08"),
	pnvPcS09: integer("pnv_pc_s09"),
	pnvPcS10: integer("pnv_pc_s10"),
	pnvPcS11: integer("pnv_pc_s11"),
	pnvPcS12: integer("pnv_pc_s12"),
	pnvPcS13: integer("pnv_pc_s13"),
	pnvPcS14: integer("pnv_pc_s14"),
	pnvPcS15: integer("pnv_pc_s15"),
	pnvPcU01: integer("pnv_pc_u01"),
	pnvPcU02: integer("pnv_pc_u02"),
	pnvPcU03: integer("pnv_pc_u03"),
	pnvPcU04: integer("pnv_pc_u04"),
	pnvPcU05: integer("pnv_pc_u05"),
	pnvPcU06: integer("pnv_pc_u06"),
	pnvPcU07: integer("pnv_pc_u07"),
	pnvPcU08: integer("pnv_pc_u08"),
	pnvPcU09: integer("pnv_pc_u09"),
	pnvPcU10: integer("pnv_pc_u10"),
	pnvPcU11: integer("pnv_pc_u11"),
	pnvPcU12: integer("pnv_pc_u12"),
	pnvPcU13: integer("pnv_pc_u13"),
	pnvPcU14: integer("pnv_pc_u14"),
	pnvPcU15: integer("pnv_pc_u15"),
	wetClSmj: integer("wet_cl_smj"),
	wetPcSg1: integer("wet_pc_sg1"),
	wetPcUg1: integer("wet_pc_ug1"),
	wetPcSg2: integer("wet_pc_sg2"),
	wetPcUg2: integer("wet_pc_ug2"),
	wetPcS01: integer("wet_pc_s01"),
	wetPcS02: integer("wet_pc_s02"),
	wetPcS03: integer("wet_pc_s03"),
	wetPcS04: integer("wet_pc_s04"),
	wetPcS05: integer("wet_pc_s05"),
	wetPcS06: integer("wet_pc_s06"),
	wetPcS07: integer("wet_pc_s07"),
	wetPcS08: integer("wet_pc_s08"),
	wetPcS09: integer("wet_pc_s09"),
	wetPcU01: integer("wet_pc_u01"),
	wetPcU02: integer("wet_pc_u02"),
	wetPcU03: integer("wet_pc_u03"),
	wetPcU04: integer("wet_pc_u04"),
	wetPcU05: integer("wet_pc_u05"),
	wetPcU06: integer("wet_pc_u06"),
	wetPcU07: integer("wet_pc_u07"),
	wetPcU08: integer("wet_pc_u08"),
	wetPcU09: integer("wet_pc_u09"),
	forPcSse: integer("for_pc_sse"),
	forPcUse: integer("for_pc_use"),
	crpPcSse: integer("crp_pc_sse"),
	crpPcUse: integer("crp_pc_use"),
	pstPcSse: integer("pst_pc_sse"),
	pstPcUse: integer("pst_pc_use"),
	irePcSse: integer("ire_pc_sse"),
	irePcUse: integer("ire_pc_use"),
	glaPcSse: integer("gla_pc_sse"),
	glaPcUse: integer("gla_pc_use"),
	prmPcSse: integer("prm_pc_sse"),
	prmPcUse: integer("prm_pc_use"),
	pacPcSse: integer("pac_pc_sse"),
	pacPcUse: integer("pac_pc_use"),
	tbiClSmj: integer("tbi_cl_smj"),
	tecClSmj: integer("tec_cl_smj"),
	fmhClSmj: integer("fmh_cl_smj"),
	fecClSmj: integer("fec_cl_smj"),
	clyPcSav: integer("cly_pc_sav"),
	clyPcUav: integer("cly_pc_uav"),
	sltPcSav: integer("slt_pc_sav"),
	sltPcUav: integer("slt_pc_uav"),
	sndPcSav: integer("snd_pc_sav"),
	sndPcUav: integer("snd_pc_uav"),
	socThSav: integer("soc_th_sav"),
	socThUav: integer("soc_th_uav"),
	swcPcSyr: integer("swc_pc_syr"),
	swcPcUyr: integer("swc_pc_uyr"),
	swcPcS01: integer("swc_pc_s01"),
	swcPcS02: integer("swc_pc_s02"),
	swcPcS03: integer("swc_pc_s03"),
	swcPcS04: integer("swc_pc_s04"),
	swcPcS05: integer("swc_pc_s05"),
	swcPcS06: integer("swc_pc_s06"),
	swcPcS07: integer("swc_pc_s07"),
	swcPcS08: integer("swc_pc_s08"),
	swcPcS09: integer("swc_pc_s09"),
	swcPcS10: integer("swc_pc_s10"),
	swcPcS11: integer("swc_pc_s11"),
	swcPcS12: integer("swc_pc_s12"),
	litClSmj: integer("lit_cl_smj"),
	karPcSse: integer("kar_pc_sse"),
	karPcUse: integer("kar_pc_use"),
	eroKhSav: integer("ero_kh_sav"),
	eroKhUav: integer("ero_kh_uav"),
	popCtSsu: doublePrecision("pop_ct_ssu"),
	popCtUsu: doublePrecision("pop_ct_usu"),
	ppdPkSav: doublePrecision("ppd_pk_sav"),
	ppdPkUav: doublePrecision("ppd_pk_uav"),
	urbPcSse: integer("urb_pc_sse"),
	urbPcUse: integer("urb_pc_use"),
	nliIxSav: integer("nli_ix_sav"),
	nliIxUav: integer("nli_ix_uav"),
	rddMkSav: integer("rdd_mk_sav"),
	rddMkUav: integer("rdd_mk_uav"),
	hftIxS93: integer("hft_ix_s93"),
	hftIxU93: integer("hft_ix_u93"),
	hftIxS09: integer("hft_ix_s09"),
	hftIxU09: integer("hft_ix_u09"),
	gadIdSmj: integer("gad_id_smj"),
	gdpUdSav: integer("gdp_ud_sav"),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	gdpUdSsu: bigint("gdp_ud_ssu", { mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	gdpUdUsu: bigint("gdp_ud_usu", { mode: "number" }),
	hdiIxSav: integer("hdi_ix_sav"),
});

export const banhadoRioDaPrataInRioDaPrata = rioDaPrata.table("Banhado_Rio_Da_Prata", {
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	id: bigint({ mode: "number" }).primaryKey().notNull(),
	geom: geometry({ type: "multipolygon", srid: 4326 }),
});

export const leitoRioDaPrataInRioDaPrata = rioDaPrata.table("Leito_Rio_Da_Prata", {
	id: serial().primaryKey().notNull(),
	geom: geometry({ type: "multilinestringz", srid: 4326 }),
	name: varchar({ length: 254 }),
	descriptio: varchar({ length: 254 }),
	timestamp: varchar({ length: 24 }),
	begin: varchar({ length: 24 }),
	end: varchar({ length: 24 }),
	altitudemo: varchar({ length: 254 }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	tessellate: bigint({ mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	extrude: bigint({ mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	visibility: bigint({ mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	draworder: bigint({ mode: "number" }),
	icon: varchar({ length: 254 }),
	descript1: varchar("descript_1", { length: 254 }),
	altitude1: varchar("altitude_1", { length: 254 }),
	gmLayer: varchar("gm_layer", { length: 254 }),
	gmType: varchar("gm_type", { length: 254 }),
	layer: varchar({ length: 254 }),
	compriment: numeric(),
	metros: doublePrecision(),
});

export const trilhasInRioDaPrata = rioDaPrata.table("trilhas", {
	id: serial().primaryKey().notNull(),
	nome: text().notNull(),
	geom: geometry({ type: "multilinestringz", srid: 4326 }).notNull(),
	dataInicio: timestamp("data_inicio", { mode: 'string' }),
	dataFim: timestamp("data_fim", { mode: 'string' }),
	duracaoMinutos: integer("duracao_minutos"),
});

export const dequeDePedrasInRioDaPrata = rioDaPrata.table("deque_de_pedras", {
	id: serial().primaryKey().notNull(),
	local: varchar({ length: 255 }),
	mes: varchar({ length: 50 }),
	data: date(),
	turbidez: numeric({ precision: 5, scale:  2 }),
	secchiVertical: numeric("secchi_vertical", { precision: 5, scale:  2 }),
	secchiHorizontal: numeric("secchi_horizontal", { precision: 5, scale:  2 }),
	chuva: numeric({ precision: 5, scale:  2 }),
});

export const desmatamentoInRioDaPrata = rioDaPrata.table("desmatamento", {
	id: serial().primaryKey().notNull(),
	alertid: text(),
	alertcode: text(),
	alertha: doublePrecision(),
	source: text(),
	detectat: text(),
	detectyear: integer(),
	state: text(),
	stateha: doublePrecision(),
	geom: geometry({ type: "geometry", srid: 4326 }),
});

export const propriedadesInRioDaPrata = rioDaPrata.table("propriedades", {
	id: serial().primaryKey().notNull(),
	codTema: varchar("cod_tema", { length: 50 }),
	nomTema: varchar("nom_tema", { length: 100 }),
	codImovel: varchar("cod_imovel", { length: 100 }),
	modFiscal: doublePrecision("mod_fiscal"),
	numArea: doublePrecision("num_area"),
	indStatus: varchar("ind_status", { length: 20 }),
	indTipo: varchar("ind_tipo", { length: 20 }),
	desCondic: text("des_condic"),
	municipio: varchar({ length: 100 }),
	geom: geometry({ type: "multipolygon", srid: 4326 }),
});


export const estradasInRioDaPrata = rioDaPrata.table("estradas", {
	id: serial().primaryKey().notNull(),
	nome: varchar({ length: 255 }),
	tipo: varchar({ length: 100 }),
	codigo: varchar({ length: 50 }),
	geom: geometry({ type: "multilinestringz", srid: 4326 }),
});

export const waypointsInRioDaPrata = rioDaPrata.table("waypoints", {
	id: serial().primaryKey().notNull(),
	trilhaId: integer("trilha_id").notNull(),
	nome: text(),
	geom: geometry({ type: "pointz", srid: 4326 }).notNull(),
	ele: doublePrecision(),
	recordedat: timestamp({ mode: 'string' }),
}, (table) => [
	foreignKey({
			columns: [table.trilhaId],
			foreignColumns: [trilhasInRioDaPrata.id],
			name: "waypoints_trilha_id_trilhas_id_fk"
		}).onDelete("cascade"),
]);

export const ponteDoCureInRioDaPrata = rioDaPrata.table("ponte_do_cure", {
	id: serial().primaryKey().notNull(),
	local: varchar({ length: 255 }),
	mes: varchar({ length: 50 }),
	data: date(),
	chuva: numeric({ precision: 5, scale:  2 }),
	nivel: numeric({ precision: 5, scale:  2 }),
	visibilidade: varchar({ length: 50 }),
});

export const rawFirmsInRioDaPrata = rioDaPrata.table("raw_firms", {
	latitude: doublePrecision(),
	longitude: doublePrecision(),
	brightTi4: doublePrecision("bright_ti4"),
	scan: doublePrecision(),
	track: doublePrecision(),
	acqDate: date("acq_date"),
	acqTime: text("acq_time"),
	satellite: text(),
	instrument: text(),
	confidence: text(),
	version: text(),
	brightTi5: doublePrecision("bright_ti5"),
	frp: doublePrecision(),
	daynight: text(),
	type: text(),
	horaDeteccao: time("hora_deteccao"),
	geom: geometry({ type: "point", srid: 4674 }),
	id: uuid().defaultRandom().primaryKey().notNull(),
}, (table) => [
	unique("raw_firms_id_key").on(table.id),
]);

export const acoesInRioDaPrata = rioDaPrata.table("acoes", {
	id: serial().primaryKey().notNull(),
	name: varchar({ length: 255 }),
	latitude: numeric({ precision: 10, scale:  6 }),
	longitude: numeric({ precision: 10, scale:  6 }),
	elevation: numeric({ precision: 8, scale:  2 }),
	time: timestamp({ mode: 'string' }),
	descricao: varchar({ length: 255 }),
	mes: varchar({ length: 50 }),
	atuacao: varchar({ length: 100 }),
	acao: varchar({ length: 100 }),
	geom: geometry({ type: "point", srid: 4326 }),
});

export const fotosAcoesInRioDaPrata = rioDaPrata.table("fotos_acoes", {
	id: serial().primaryKey().notNull(),
	acaoId: integer("acao_id").notNull(),
	url: varchar({ length: 1000 }).notNull(),
	descricao: varchar({ length: 255 }),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow(),
}, (table) => [
	foreignKey({
			columns: [table.acaoId],
			foreignColumns: [acoesInRioDaPrata.id],
			name: "fotos_acoes_acao_id_acoes_id_fk"
		}),
]);


